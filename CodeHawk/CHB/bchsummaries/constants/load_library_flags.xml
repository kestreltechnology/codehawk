<?xml version="1.0" encoding="UTF-8"?>
<codehawk-binary-analyzer>
  <header name="hresult" creation-date="2015-02-07" last-revision="2015-02-07">
    <reference href="http://msdn.microsoft.com/"/>
  </header>
  <symbolic-constants type="load_library_flags">
    <type>load_library_flags</type>
    <values>
    <symf name="DONT_RESOLVE_DLL_REFERENCES" value="0x00000001">
      <desc>
	If this value is used, and the executable module is a DLL, the system
	does not call DllMain for process and thread initialization and termination. 
	Also, the system does not load additional executable modules that are 
	referenced by the specified module.
	Note  Do not use this value; it is provided only for backward compatibility.
	If you are planning to access only data or resources in the DLL, use 
	LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE 
	or both. Otherwise, load the library as a DLL or executable module 
	using the LoadLibrary function.
      </desc>
    </symf>
    <symf name="LOAD_IGNORE_CODE_AUTHZ_LEVEL" value="0x00000010">
      <desc>
	If this value is used, the system does not check AppLocker rules or 
	apply Software Restriction Policies for the DLL. This action applies 
	only to the DLL being loaded and not to its dependencies. This value 
	is recommended for use in setup programs that must run extracted DLLs 
	during installation.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_AS_DATAFILE" value="0x00000002">
      <desc>
	If this value is used, the system maps the file into the calling 
	process's virtual address space as if it were a data file. Nothing 
	is done to execute or prepare to execute the mapped file. Therefore, 
	you cannot call functions like GetModuleFileName, GetModuleHandle or 
	GetProcAddress with this DLL. Using this value causes writes to 
	read-only memory to raise an access violation. Use this flag when you 
	want to load a DLL only to extract messages or resources from it.
	This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE" value="0x00000040">
      <desc>
	Similar to LOAD_LIBRARY_AS_DATAFILE, except that the DLL file is opened 
	with exclusive write access for the calling process. Other processes 
	cannot open the DLL file for write access while it is in use. However, 
	the DLL can still be opened by other processes.
	This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_AS_IMAGE_RESOURCE" value="0x00000020">
      <desc>
	If this value is used, the system maps the file into the process's 
	virtual address space as an image file. However, the loader does not 
	load the static imports or perform the other usual initialization 
	steps. Use this flag when you want to load a DLL only to extract 
	messages or resources from it.
	Unless the application depends on the file having the in-memory 
	layout of an image, this value should be used with either 
	LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_DATAFILE.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_SEARCH_APPLICATION_DIR" value="0x00000200">
      <desc>
	If this value is used, the application's installation directory 
	is searched for the DLL and its dependencies. Directories in the 
	standard search path are not searched. This value cannot be combined 
	with LOAD_WITH_ALTERED_SEARCH_PATH.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_SEARCH_DEFAULT_DIRS" value="0x00001000">
      <desc>
	LOAD_LIBRARY_SEARCH_APPLICATION_DIR, LOAD_LIBRARY_SEARCH_SYSTEM32, 
	and LOAD_LIBRARY_SEARCH_USER_DIRS. Directories in the standard 
	search path are not searched. This value cannot be combined with 
	LOAD_WITH_ALTERED_SEARCH_PATH.
	This value represents the recommended maximum number of directories 
	an application should include in its DLL search path.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR" value="0x00000100">
      <desc>
	If this value is used, the directory that contains the DLL is
	temporarily added to the beginning of the list of directories 
	that are searched for the DLL's dependencies. Directories in 
	the standard search path are not searched.
	The lpFileName parameter must specify a fully qualified path. 
	This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_SEARCH_SYSTEM32" value="0x00000800">
      <desc>
	If this value is used, %windows%\system32 is searched for the DLL 
	and its dependencies. Directories in the standard search path are 
	not searched. This value cannot be combined with 
	LOAD_WITH_ALTERED_SEARCH_PATH.
      </desc>
    </symf>
    <symf name="LOAD_LIBRARY_SEARCH_USER_DIRS" value="0x00000400">
      <desc>
	If this value is used, directories added using the AddDllDirectory 
	or the SetDllDirectory function are searched for the DLL and its 
	dependencies. If more than one directory has been added, the order 
	in which the directories are searched is unspecified. Directories 
	in the standard search path are not searched. This value cannot 
	be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
      </desc>
    </symf>
    <symf name="LOAD_WITH_ALTERED_SEARCH_PATH" value="0x00000008">
      <desc>
	If this value is used and lpFileName specifies an absolute path,
	the system uses the alternate file search strategy discussed in 
	the Remarks section to find associated executable modules that 
	the specified module causes to be loaded. If this value is used 
	and lpFileName specifies a relative path, the behavior is undefined.
	If this value is not used, or if lpFileName does not specify a 
	path, the system uses the standard search strategy discussed in 
	the Remarks section to find associated executable modules that
	the specified module causes to be loaded.
	This value cannot be combined with any LOAD_LIBRARY_SEARCH flag.
      </desc>
    </symf>
  </values>
  </symbolic-constants>
</codehawk-binary-analyzer>
